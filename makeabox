// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URlStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract ChicBox is ERC721, ERC721URlStorage {

using Counters for Counters.Counter;

Counters.Counter private _tokenIdCounter;

string[] IpfsUrl = [

"https://ipfs.io/ipfs/Qmbc64sxTZVmbQbeFBifb99hdAMSCRVW8s1GMQvy6FhWb7?filename=box",
"https://ipfs.io/ipfs/QmQcor1ZxV8o2pACm4cgPmCvgqtePGgcHaJNp5ZxWGR8Zp?filename=animBox",
"https://ipfs.io/ipfs/QmT4VK4DmfVe9CbS4BnWUyUbMh8WxyuGVGv3JrhLpbNj98?filename=reward"

];

uint interval;
uint lastTimeStamp;

 constructor(uint _interval) ERC721("POLYdNFTs", "bNFTs") {

     interval = _interval;
     lastTimeStamp = block.timestamp;
    
}
  
function checkUpkeep(bytes calldata /* checkData */) external view  returns (bool upkeepNeeded, bytes memory /* performData */) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external  {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp = block.timestamp;
            makebox(0);

                  }
                }
            
            
     function safeMint(address to) public {
        uint256 tokenId = _tokenIdCounter.current();
      _tokenIdCounter.increment();
       _safeMint(to, tokenId);
       _setTokenURl(tokenId, IpfsUri[0]);
    }
    
    
    function makebox(uint256 _tokenId) public {
        if(reward(_tokenId) >= 2) {return;}
        //dobimo stage in dodamo
        uint256 newVal = animBox(_tokenId) + 1;
        //shrani nov URL
        string memory newUrl = IpfsUrl[newVal];
        //updeta Url
        _setTokenURl(_tokenId, newUri);



    }

    //helper funkcije

    //doloci stage rasti,razvoja
    function Newbox(uint256 _tokenId)public view returns (uint256) {
        string memory _uri = tokenURl(_tokenId);
    }
    

    }
